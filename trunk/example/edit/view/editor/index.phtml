<?php
/*
 * Copyright (C) 2017 Anders Lövgren (QNET/BMC CompDept).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// 
// File content editor.
// 

?>

<style>
    :-webkit-full-screen {
        width: 100%;
        height: 100%;
        overflow-y: scroll;
    }
</style>

<div class="w3-container w3-margin-top w3-padding-12  w3-animate-bottom">
    <h1><?= _("Editor") ?> (<span id="editor-filename"></span>)</h1>
    <div class=" w3-border">

        <div class="w3-bar w3-green">
            <button class="w3-bar-item w3-button tablink" id="inline-editor-tab" onclick="open_editor('inline', event)"><?= _("Inline") ?></button>
            <button class="w3-bar-item w3-button tablink" id="source-editor-tab" onclick="open_editor('source', event)"><?= _("Source") ?></button>
            <button class="w3-bar-item w3-button tablink" id="normal-editor-tab" onclick="open_editor('normal', event)"><?= _("Normal") ?></button>
            <button class="w3-bar-item w3-button w3-right w3-hide-small" onclick="close_file()">X</button>
            <button class="w3-bar-item w3-button w3-right" onclick="toggle_fullscreen()">¤</button>
        </div>

        <div class="w3-row w3-margin-top olle">
            <div class="w3-col w3-right w3-hide-small" style="width:100px">
                <p><input style="min-width: 80px" class="w3-btn w3-large w3-deep-orange" type="button" onclick="save_file(this)" value="<?= _("Save") ?>"></p>
                <p><input style="min-width: 80px" class="w3-btn w3-large w3-blue-gray" type="button" onclick="close_file(this)" value="<?= _("Close") ?>"></p>
            </div>

            <div class="w3-rest w3-margin-bottom">
                <div id="inline-editor" class="w3-container editor-section" style="display:none">
                    <?php require_once('inline.phtml'); ?>
                </div>

                <div id="source-editor" class="w3-container editor-section" style="display:none">
                    <?php require_once('source.phtml'); ?>
                </div>

                <div id="normal-editor" class="w3-container editor-section" style="display:none">
                    <?php require_once('normal.phtml'); ?>
                </div>
            </div>
        </div>

        <div class="w3-padding-left w3-padding-16 w3-hide-medium w3-hide-large">
            <input style="min-width: 80px" class="w3-btn w3-large w3-deep-orange" type="button" onclick="save_file(this)" value="<?= _("Save") ?>">
            <input style="min-width: 80px" class="w3-btn w3-large w3-blue-gray" type="button" onclick="close_file(this)" value="<?= _("Close") ?>">
        </div>

    </div>
</div>

<script>

        // 
        // Open file for editing.
        // 
        function open_file(path, event) {
            api.stat(path, function (stat) {
                var response = JSON.parse(stat.responseText);

                if (response.result.mime !== 'text/html') {
                    hide_editor('inline', true);
                } else {
                    hide_editor('inline', false);
                }

                api.read(path, function (xhr) {
                    uup.editor.file.name = path;
                    uup.editor.file.mime = response.result.mime;
                    uup.editor.file.stat = response.result;
                    uup.editor.text = xhr.response;

                    load_editor(uup.editor.curr.gettype());
                    open_section('editor');    // unhide parent container.

                    document.getElementById('editor-filename').innerHTML = uup.editor.file.name.split('/').pop();
                });
            });

            event.preventDefault();
        }

        // 
        // Save edited file.
        // 
        function save_file(event) {
            api.update(uup.editor.file.name, uup.editor.curr.value(), function (xhr) {
                var response = JSON.parse(xhr.responseText);
                if (response.status === 'success') {
                    // show status update?
                } else if (response.status === 'failure') {
                    alert(response.message);
                }
            });
        }

        // 
        // Close edited file.
        // 
        function close_file(event) {
            uup.editor.curr.close();
            open_section('content');
        }

        // 
        // Load editor.
        //
        function load_editor(type) {
            uup.editor.curr.open(uup.editor.text, uup.editor.file.mime);
            uup.editor.curr.show();
            
            show_editor(type);
        }

        // 
        // Open editor.
        // 
        function open_editor(type, event) {
            uup.editor.text = uup.editor.curr.value();
            uup.editor.curr.close();

            uup.editor.curr = uup.editor.back[type];
            uup.editor.curr.open(uup.editor.text, uup.editor.file.mime);
            uup.editor.curr.show();

            show_editor(type, event);
        }

        // 
        // Close editor.
        // 
        function close_editor(event) {
            uup.editor.text = uup.editor.curr.value();
            uup.editor.curr.close();
        }

        // 
        // Make editor of type the current.
        // 
        function show_editor(type, event) {
            var i, x, tablinks, tabitem;

            x = document.getElementsByClassName("editor-section");
            for (i = 0; i < x.length; i++) {
                x[i].style.display = "none";
            }

            tablinks = document.getElementsByClassName("tablink");
            for (i = 0; i < x.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" w3-white", "");
            }

            if (event !== undefined) {
                tabitem = event.currentTarget;
            }
            if (type !== undefined) {
                tabitem = document.getElementById(type + '-editor-tab');
            }
            if (tabitem !== undefined) {
                tabitem.className += " w3-white";
            }

            document.getElementById(type + '-editor').style.display = 'block';
        }

        function hide_editor(type, hidden) {
            if (uup.editor.curr.gettype() === type) {
                uup.editor.curr = uup.editor.back['source'];
            }
            if (hidden) {
                document.getElementById(type + '-editor-tab').style.display = 'none';
            } else {
                document.getElementById(type + '-editor-tab').style.display = 'block';
            }
        }

        function toggle_fullscreen() {
            if (!document.fullscreenElement) {
                var element = document.getElementById('section-editor');

                if (element.requestFullscreen) {
                    element.requestFullscreen();
                } else if (element.msRequestFullscreen) {
                    element.msRequestFullscreen();
                } else if (element.mozRequestFullScreen) {
                    element.mozRequestFullScreen();
                } else if (element.webkitRequestFullscreen) {
                    element.webkitRequestFullscreen();
                }
            } else {
                if (document.exitFullScreen) {
                    document.exitFullScreen();
                }
            }
        }

</script>
