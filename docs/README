=============================================================================
    UUP-SITE - OOP site 
=============================================================================

This library takes a object oriented approach at building web sites by separating 
page layout from content. It supports multiple theme, rendering page direct or
using a dispatcher (routing) script.

Despite its name, this package can be used as the rendering engine in any web
application. In the following though, we will outline the process for using it
to render an ordinary web site.

** Site Layout:

    Proposed site layout. All directory location are configurable in config/defaults.site
    that is used to initialize a page class instance.

    site/
      +-- htdocs/                       // Document root
      |     +-- theme/xyz/assets/       // Theme support files
      |                     +-- css/
      |                     +-- js/
      |                     +-- img/
      +-- template/                     // Page rendering templates (themes)
      +-- locale/                       // Support for locale (gettext)
      +-- vendor/                       // Composer packages, including uup-site
      +-- composer.json                 // Site project composer file
      +-- Makefile                      // Compile locales (PO-files).

** Site config:

    The config/defaults.site file is looked for in the package directory (vendor/bmc/uup-site)
    or in the site directory (the virtual host directory). 

** Setup:

    Composer is the de-factor standard for installing PHP packages. There are two ways to
    use this package: Either as a package or stand-alone.

    o) Use as package:

        Start by initialize the composer.json file:

            bash$> cd /var/www/<virtual-host-root>
            bash$> composer init

        Add the repository to composer.json:

            "repositories": [
                {
                    "type": "composer",
                    "url": "http://it.bmc.uu.se/andlov/php/proj/bmc/uup-site/"
                }
            ],
            "require": {
                "bmc/uup-site": ">=0.9.0"
            }

        Require the package to have it installed:

            bash$> composer require bmc/uup-site

        Run the uup-site.php script to finish setup:

            bash$> ./vendor/bin/uup-site.sh

    o) Use in standalone mode:

        This mode is suitable for small sites or web applications. Begin by downloading
        the package:

            bash$> cd /var/www/<virtual-host-root>
            bash$> wget http://it.bmc.uu.se/andlov/php/proj/bmc/uup-site/stable/latest.tar.gz

        Unpack the source:

            bash$> tar xfvp latest.tar.gz

        You should now have an almost functional directory structure. Start by generating
        the composer autoloader:

            bash$> composer dump-autoload

        Run uup-site.php to initialize the site or application:

            bash$> ./uup-site.sh

        Open config/defaults.site to tweak options. The default options (none) should be
        fine in most cases.

    After running uup-site.php, review content of public and config. Decide upon if page
    routing (mod_rewrite) should be used or not.

** Themes:

    All themes should at least provide the standard.ui template, but it's up to user 
    to define any number of *.ui files as needed. See template/default for example on
    theme construction.

    Download and install themes from http://it.bmc.uu.se/andlov/php/proj/bmc/uup-site. 

** Example (different ways of rendering a page class):

    o) Using direct rendering:

        // 
        // Assume virtual host defines include path to root directory:
        // 
        require_once('vendor/autoload.php');

        use UUP\Site\Page\StandardPage;

        class IndexPage extends StandardPage
        {
            // Define the printContent() member function at least.
        };

        $page = new IndexPage();
        $page->render();

    o) Using page routing (pretty URL's):

        // 
        // The dispatcher.php (router) has already setup autoloading, no need
        // to explicit call render() either.
        // 
        class IndexPage extends StandardPage
        {
            // Define the printContent() member function at least.
        };

    More examples is included in example directory in the source package.

** Infrastructure:

    Menus and publish information can either be defined by having custom files in
    the page directory or programmatically by redefining menu content in the page 
    constructor.

    See example/context for infrastructure example. See example/multi for example
    on programmatically defined menus. The site config file has some influence on menu 
    handling too.
        
// Anders LÃ¶vgren, 2015-12-07
